Code : Min Steps to 1
Send Feedback
Given a positive integer 'n', find and return the minimum number of steps that 'n' has to take to get reduced to 1. You can perform any one of the following 3 steps:
1.) Subtract 1 from it. (n = n - ­1) ,
2.) If its divisible by 2, divide by 2.( if n % 2 == 0, then n = n / 2 ) ,
3.) If its divisible by 3, divide by 3. (if n % 3 == 0, then n = n / 3 ).  
Write brute-force recursive solution for this.
Input format :
The first and the only line of input contains an integer value, 'n'.
Output format :
Print the minimum number of steps.
Constraints :
1 <= n <= 200

Time Limit: 1 sec
Sample Input 1 :
4
Sample Output 1 :
2 
Explanation of Sample Output 1 :
For n = 4
Step 1 :  n = 4 / 2  = 2
Step 2 : n = 2 / 2  =  1 
Sample Input 2 :
7
Sample Output 2 :
3
Explanation of Sample Output 2 :
For n = 7
Step 1 :  n = 7 ­- 1 = 6
Step 2 : n = 6  / 3 = 2 
Step 3 : n = 2 / 2 = 1  




#include<bits/stdc++.h>
int countHelper( int n){
    if(n==1){
        return 0;
    }
    
    //if(a[n]!=INT_MAX){
        //return a[n];
    //}
    int c1=0 ,c2=0,c3=0;
    
    c1+= 1 + countHelper(n-1);
    if(n%2==0){
        c2+= 1+ countHelper( n/2);
    }else c2 = INT_MAX;
    
    if(n%3==0){
        c3+= 1+ countHelper(n/3);
    }else c3=INT_MAX;
    
    int count = min(c1 , min(c2 , c3));
     // a[n] = count;
    return count;
}

int countMinStepsToOne(int n)
{
	//Write your co de here
    // int *a = new int[n+1];
    if(n == 1) return 0;
    // for(int i=0;i<n+1;i++){
    //     a[i] = INT_MAX;
    // }
   return countHelper(n);
    
}
